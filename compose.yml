services:
  #nextjs service
  nextapp:
    container_name: nextapp
    image: nextapp:1.0.0
    build:
      context: ./next_app
      dockerfile: next.dockerfile
    environment:
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - AUTH_TRUST_HOST=${AUTH_TRUST_HOST}
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
      - AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_started
      flaskapi:
        condition: service_started
    restart: unless-stopped
    volumes:
      - ./next_app/prisma:/app/prisma

  # flask service
  flaskapi:
    container_name: flask_api
    image: flaskapp:1.0.0
    build:
      context: ./flask_api
      dockerfile: flask.dockerfile
    environment:
      - EMAIL_ADDRESS=${EMAIL_ADDRESS}
      - INDRA_API_KEY=${INDRA_API_KEY}
    restart: unless-stopped


# db service
  db:
    container_name: db
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  # Add nginx service
  nginx:
    container_name: nginx
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf:/etc/nginx/ssl/:ro
    depends_on:
      - nextapp
      - flaskapi
    restart: unless-stopped

  # Add certbot service for SSL
  certbot:
    container_name: certbot
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${EMAIL_ADDRESS} -d curetogether.one --agree-tos

volumes:
  pgdata:
    driver: local
